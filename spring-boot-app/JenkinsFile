pipeline {
    agent any
    environment {
        // Ensure Docker is in the PATH
        PATH = "/usr/local/bin:/usr/bin:/bin:/sbin:/usr/sbin:$PATH"
        
        // Docker-related environment variables
        DOCKER_IMAGE = "okeymcokoli/todo:${BUILD_NUMBER}"
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_REGISTRY = "index.docker.io"
        REGISTRY_CREDENTIALS = credentials('docker-cred')

        // SonarQube configuration
        SONAR_URL = "http://localhost:9000"
        SONAR_PROJECT_KEY = "maven-project" // Add your actual SonarQube project key here to ensure successful integration
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo passed'
                git branch: 'main', url: 'https://github.com/okeymcokoli/maven-project.git'
            }
        }

        stage('Build and Test') {
            steps {
                sh 'ls -ltr'
                // Build the project and create a JAR file
                sh 'cd spring-boot-app && mvn clean package'
            }
        }

        stage('Static Code Analysis') {
            environment {
                SONAR_URL = "http://localhost:9000"
            }
            steps {
                withCredentials([string(credentialsId: 'Jenkins-user', variable: 'SONAR_TOKEN')]) {
                    sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=${SONAR_URL}'
                }
            }
        }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "okeymcokoli/maven-app:${BUILD_NUMBER}"
                // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "maven-project"
                GIT_USER_NAME = "okeymcokoli"
            }
            steps {
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    script {
                        def commitMessage = "Update deployment image to version ${BUILD_NUMBER}"
                        
                        // Configure Git user for committing changes
                        sh '''
                            git config user.email "okeymcokoli@icloud.com"
                            git config user.name "okeymcokoli"
                            
                            # Use sed to replace the image tag in deployment.yml
                            sed -i '' "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                            
                            # Stage the file and commit
                            git add spring-boot-app-manifests/deployment.yml
                            git commit -m "${commitMessage}"
                        '''

                        // Push changes to GitHub with a flag to avoid triggering a webhook
                        if (commitMessage != "[ci skip]") {
                            sh """
                                git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                            """
                        } else {
                            echo "Skipping push to GitHub due to '[ci skip]' flag."
                        }
                    }
                }
            }
        }
    }
}