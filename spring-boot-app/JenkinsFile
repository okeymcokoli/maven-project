pipeline {
    agent any

    environment {
        // Ensure Docker is in the PATH
        PATH = "/usr/local/bin:/usr/bin:/bin:/sbin:/usr/sbin" // Path doesn't need resetting unless really necessary
        
        // Docker-related environment variables
        DOCKER_IMAGE = "okeymcokoli/maven-app:${BUILD_NUMBER}"
        IMAGE_TAG = "${BUILD_NUMBER}"
        DOCKER_REGISTRY = "index.docker.io"
        REGISTRY_CREDENTIALS = credentials('docker-cred')

        // SonarQube configuration
        SONAR_URL = "http://localhost:9000"
        SONAR_PROJECT_KEY = "maven-project" // Update with your actual SonarQube project key
    }

    stages {
        stage('Checkout') {
            steps {
                sh 'echo "Checking out the repository"'
                git branch: 'main', url: 'https://github.com/okeymcokoli/maven-project.git'
            }
        }

        // stage('Build and Test') {
        //     steps {
        //         sh 'echo "Listing files in the repo"'
        //         sh 'ls -ltr'
                
        //         // Build the project and create a JAR file
        //         sh 'cd spring-boot-app && mvn clean package'
        //     }
        // }
        // stage('Static Code Analysis') {
        //     environment {
        //         SONAR_URL = "http://localhost:9000"
        //     }
        //     steps {
        //         withCredentials([string(credentialsId: 'Jenkins-user', variable: 'SONAR_TOKEN')]) {
        //             sh 'cd spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN -Dsonar.host.url=${SONAR_URL}'
        //         }
        //     }
        // }

        stage('Build and Push Docker Image') {
            environment {
                DOCKER_IMAGE = "okeymcokoli/maven-app:${BUILD_NUMBER}"
                REGISTRY_CREDENTIALS = credentials('docker-cred')
            }
            steps {
                script {
                    sh 'cd spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
                    def dockerImage = docker.image("${DOCKER_IMAGE}")
                    docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "maven-project"
                GIT_USER_NAME = "okeymcokoli"
                COMMIT_MESSAGE = "Update deployment image to version ${BUILD_NUMBER}"
            }
            steps {
                echo 'Updating deployment file with new image version'
                withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
                    script {
                        def commitMessage = "Update deployment image to version ${BUILD_NUMBER}"

                        // Ensure we are working in the correct directory
                        sh 'echo "Before modification:" && cat spring-boot-app-manifests/deployment.yml'
                        
                        // Ensure 'replaceImageTag' is present before replacing it with the new build number
                        // If the placeholder is missing, we add it back
                        sh """
                            if ! grep -q 'replaceImageTag' spring-boot-app-manifests/deployment.yml; then
                                echo 'Placeholder replaceImageTag not found, re-adding it.'
                                sed -i '' 's|image: okeymcokoli/maven-app:[0-9]*|image: replaceImageTag|' spring-boot-app-manifests/deployment.yml
                            fi
                        """

                        // Now replace the placeholder with the current build number
                        sh """
                            sed -i '' "s|replaceImageTag|okeymcokoli/maven-app:${BUILD_NUMBER}|g" spring-boot-app-manifests/deployment.yml
                        """
                        
                        // Show the file after modification for debugging
                        sh 'echo "After modification:" && cat spring-boot-app-manifests/deployment.yml'

                        // Check if changes were actually made
                        def status = sh(script: 'git status --porcelain', returnStdout: true).trim()
                        if (status) {
                            // Stage and commit the changes if there are any modifications
                            sh """
                                git config user.email "okeymcokoli@icloud.com"
                                git config user.name "okeymcokoli"
                                git add spring-boot-app-manifests/deployment.yml
                                git commit -m "${commitMessage}"
                            """
                            
                            // Push changes to GitHub with [ci skip] to avoid triggering another Jenkins build
                            sh """
                                git push https://${GITHUB_TOKEN}@github.com/okeymcokoli/maven-project HEAD:main
                            """
                        } else {
                            echo "No changes to commit. Skipping git commit and push."
                        }
                    }
                }
            }
        }
    }
}